// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol"]
}

datasource db {
  // provider  = "postgresql"
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectMemberType {
  ADMIN
  EVALUATOR
}

enum SocialMediaPlatformType {
  TWITTER
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  WEBSITE
}

enum ApplicationQuestionType {
  TEXT_INPUT
  TEXT_FIELD
  MULTIPLE_CHOICE
  MULTIPLE_SELECT
  FILE_UPLOAD
}

enum ApplicationStatus {
  DRAFT
  OPEN
  CLOSED
}

enum ApplicationSubmissionStatus {
  NEW
  DRAFT
  SUBMITTED
}

enum ApplicationSubmissionEvaluationGrade {
  YES
  NO
  MAYBE
  UNGRADED
}

model User {
  userId                 String                  @id @default(cuid())
  externalId             String                  @unique
  firstName              String
  lastName               String
  emailAddress           String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  memberships            Member[]
  applicationSubmissions ApplicationSubmission[]
}

model Project {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String
  socialMedia  SocialMedia[]
  members      Member[]
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  events       Event[]
  contactInfo  ContactInfo[]
  colorsId     String
  colors       Colors        @relation(fields: [colorsId], references: [id])
}

model Member {
  projectId                    String
  project                      Project                        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId                       String
  user                         User                           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  type                         ProjectMemberType
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  applicationSubmissionComment ApplicationSubmissionComment[]

  @@id([projectId, userId])
}

model ContactInfo {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  role      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model SocialMedia {
  id        String                  @id @default(cuid())
  projectId String
  project   Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  platform  SocialMediaPlatformType
  url       String
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  name        String
  start       DateTime
  end         DateTime
  description String
  inPerson    Boolean
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Application {
  id                     String                  @id @default(cuid())
  name                   String
  description            String                  @default("")
  projectId              String?
  project                Project?                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deadline               DateTime?
  status                 ApplicationStatus       @default(DRAFT)
  questions              ApplicationQuestion[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  applicationSubmissions ApplicationSubmission[]
  desiredSkills          String[]
}

model ApplicationQuestion {
  id                          String                        @id @default(cuid())
  application                 Application                   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  required                    Boolean
  orderNumber                 Int
  applicationId               String
  question                    String
  type                        ApplicationQuestionType
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  answerChoices               String[]
  applicationSubmissionAnswer ApplicationSubmissionAnswer[]
}

model ApplicationSubmission {
  id                              String                           @id @default(cuid())
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
  user                            User                             @relation(fields: [userId], references: [userId])
  userId                          String
  application                     Application                      @relation(fields: [applicationId], references: [id])
  applicationId                   String
  applicationSubmissionAnswers    ApplicationSubmissionAnswer[]
  applicationSubmissionStatus     ApplicationSubmissionStatus
  applicationSubmissionEvaluation ApplicationSubmissionEvaluation?
}

model ApplicationSubmissionAnswer {
  id                      String                 @id @default(cuid())
  answer                  Json
  applicationSubmission   ApplicationSubmission? @relation(fields: [applicationSubmissionId], references: [id])
  applicationSubmissionId String
  applicationQuestion     ApplicationQuestion    @relation(fields: [applicationQuestionId], references: [id])
  applicationQuestionId   String
}

model ApplicationSubmissionEvaluation {
  id                      String                               @id @default(cuid())
  evaluation              ApplicationSubmissionEvaluationGrade @default(UNGRADED)
  comments                ApplicationSubmissionComment[]
  createdAt               DateTime                             @default(now())
  updatedAt               DateTime                             @updatedAt
  applicationSubmission   ApplicationSubmission                @relation(fields: [applicationSubmissionId], references: [id])
  applicationSubmissionId String                               @unique
}

model ApplicationSubmissionComment {
  id                                String                           @id @default(cuid())
  evaluator                         Member                           @relation(fields: [memberProjectId, memberUserId], references: [projectId, userId])
  comment                           String
  applicationSubmissionEvaluation   ApplicationSubmissionEvaluation? @relation(fields: [applicationSubmissionEvaluationId], references: [id])
  applicationSubmissionEvaluationId String?
  createdAt                         DateTime                         @default(now())
  updatedAt                         DateTime                         @updatedAt
  memberProjectId                   String
  memberUserId                      String
}

model Colors {
  id             String    @id @default(cuid())
  primaryColor   String
  secondaryColor String
  project        Project[]
}
